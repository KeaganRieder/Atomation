// namespace Atomation.GameMap;

// using Atomation.Things;
// using Godot;

// /// <summary>
// /// class which holds all maps generated by the noise map gen step
// /// </summary>
// public class GenStepNoiseMapsOutput
// {
//     /// <summary>
//     /// matrix used to represent the world map's elevation
//     /// </summary>
//     public float[,] ElevationMap { get; set; }
//     /// <summary>
//     /// matrix used to represent the world map's temperature
//     /// </summary>
//     public float[,] TemperatureMap { get; set; }
//     /// <summary>
//     /// matrix used to represent the world map's moisture
//     /// </summary>
//     public float[,] MoistureMap { get; set; }
//     /// <summary>
//     /// matrix used to represent the density of trees on the game map
//     /// </summary>
//     public float[,] TreeDensityMap { get; set; }

//     public GenStepNoiseMapsOutput(Vector2I size)
//     {
//         SetNoiseMapSizes(size);
//     }

//     /// <summary>
//     /// sets the noise maps to the given size
//     /// </summary>
//     public void SetNoiseMapSizes(Vector2I size)
//     {
//         ElevationMap = new float[size.X, size.Y];
//         TemperatureMap = new float[size.X, size.Y];
//         MoistureMap = new float[size.X, size.Y];
//         TreeDensityMap = new float[size.X, size.Y];
//     }
// }

// /// <summary>
// /// defines the step in the generation of the game map, which generates
// /// the noise maps used by all gen steps
// /// </summary>
// public class GenStepNoiseMaps : GenStep
// {
//     private WorldSettings configs;

//     public GenStepNoiseMaps() { }

//     public override void RunStep(GenStepData genStepData)
//     {
//         configs = genStepData.GenStepConfigs;
//         if (configs == null)
//         {
//             genStepData.GeneratedNoiseMaps = default;

//             GD.PushError("genStepNoiseMap configs can't be null");
//             return;
//         }

//         SetSize(genStepData.GenSize);
//         SetOffset(genStepData.Offset * 32);//make it align to chunk grid
//         GenStepNoiseMapsOutput noiseMaps = new GenStepNoiseMapsOutput(genSize);

//         GradientMapGenerator GradientMapGenerator = new GradientMapGenerator(offset, genSize, configs.WorldSize, configs.TrueCenter);

//         for (int x = 0; x < genSize.X; x++)
//         {
//             for (int y = 0; y < genSize.Y; y++)
//             {
//                 // calculate cords to sample from
//                 float sampleX = (x + offset.X) / configs.MapZoom;
//                 float sampleY = (y + offset.Y) / configs.MapZoom;

//                 float elevation = configs.ElevationMap.GetNoise2D(sampleX, sampleY);
//                 float moisture = configs.MoistureMap.GetNoise2D(sampleX, sampleY);
//                 float treeDensity = configs.TreeDensityMap.GetNoise2D(sampleX, sampleY);

//                 float temperature = GetTemperatureValue(elevation, GradientMapGenerator.GetGradientNoiseValue(y));

//                 noiseMaps.ElevationMap[x, y] = elevation;
//                 noiseMaps.MoistureMap[x, y] = moisture;
//                 noiseMaps.TemperatureMap[x, y] = temperature;
//                 noiseMaps.TreeDensityMap[x, y] = treeDensity;
//             }
//         }

//         genStepData.GeneratedNoiseMaps = noiseMaps;
//     }

//     private float GetTemperatureValue(float elevation, float equatorTemperature)
//     {
//         float temperature = equatorTemperature * -1;
//         temperature -= elevation * elevation;
//         temperature += configs.BaseTemperature;

//         return temperature;
//     }
// }