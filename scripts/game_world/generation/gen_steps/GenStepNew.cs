namespace Atomation.GameMap;

using System.Collections.Generic;
using Atomation.Things;
using Godot;

/// <summary>
/// stores data that has be generated by genSteps and or used  to configure them
/// </summary>
public class GenStepDataNew
{
    /// <summary>
    /// used to set the offset of the current Generation Step
    /// </summary>
    public Vector2I GenOffset { get; set; }
    /// <summary>
    /// used to set the size  of the current Generation Step
    /// </summary>
    public Vector2I GenSize { get; set; }

    /// <summary>
    /// dictionary that contains various noise maps which are used by Generation Steps
    /// to generate things 
    /// </summary>
    public Dictionary<string, float[,]> NoiseMaps { get; set; }

    /// <summary>
    /// contains the various layers for teh world generated by a generation
    /// step
    /// </summary>
    public Dictionary<string, Thing[,]> MapLayers { get; set; }

    public GenStepDataNew(Vector2I genOffset, Vector2I genSize)
    {
        NoiseMaps = new Dictionary<string, float[,]>();
        MapLayers = new Dictionary<string, Thing[,]>();
        GenSize = genSize;
        GenOffset = genOffset;
    }


}

/// <summary>
/// a GenStep is used to define a part of the maps generation process
/// </summary>
public abstract class GenStepNew : Generator<object>
{
    public virtual bool Validate()
    {
        GD.PushWarning("genStep  validation hasn't be implemented");

        return false;
    }

    /// <summary>
    /// runs the generation step, and sets the outputted data to the correct location
    /// in GenStepDataNew
    /// </summary>
    public virtual void RunStep(WorldConfigs configs, GenStepDataNew genStepData)
    {
        GD.PushWarning("genStep hasn't be implemented");
    }
}